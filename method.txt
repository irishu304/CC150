String
String s = new String(“abcde”);
String s = new String(a, 1, 3); == String s = new String(“bcd”);
public int length() : a.length(); // return 5

char a[] = {“a”, “b”, “c”, “d”, “e”};  String s = new String(a);
char[] toCharArray(); //string->char[]
void getChars(int start, int end, char c[], int offset);

boolean equals(String s); public boolean equalsIgnoreCase(String s);
boolean startsWith(String s); public boolean endsWith(String s); 
int compareTo(String s); //compare Unicode value, a < c, return < 0
boolean contains(String s);

int indexOf(String s); //first occurrence
int indexOf(String s, int startpoint);
int lastIndexOf(String s);
String substring(int startpoint);
String substring(int start, int end); //[start, end - 1]

integer parseInt(String s) throws NumberFormatException;
byte parseByte(String s) throws NumberFormatException;
String valueOf(int n); //value -> string

StringBuffer s = new StringBuffer(int size);
StringBuffer s = new StringBuffer(String str);
StringBuffer append(String str); append(char n);
char charAt(int n); void setCharAt(int n, char c);
insert(int index, String str);
delete(int startIndex, int endIndex);
replace(int startIndex, int endIndex, String str);

Date
Date nowTime = new Date(); //Sun Jul 9 18:48:00 EST

Calendar calendar = Calendar.getInstance();
public final void set(int year, int month, int date, int hour, int minute, 
int second);

Math
//contains two static constant E & PI
long abs(double a); //absolute value
double max(double a, double b);
double min(double a, double b);
double pow(double a, double b) // a ^ b
double sqrt(double a); //square root
double log(double a); //log a
double random(); //random number in (0, 1)

Random random = new Random();
random.nextInt(); //random integer
random.nextInt(int n); //random integer in [0, n)
random.nextBoolean();

LinkedList<int> //not in order, simple to insert/delete.    
int size();
boolean add(int data); //add node at the end
boolean remove(int data); //remove first node contains data
void add(int index, int data);
void addFirst(int data); void addLast(int data);
int set(int index, int data); //return data being replaced
int get(int index); //return data
int getFirst(); int getLast();
int indexOf(int data); //return first node contains data, else return -1
int lastIndexOf(int data); //return last node contains data
int remove(int index); //delete the node
int removeFirst(); int removeLast(); //return node’s data
void clear(); //delete all nodes, get a null linked list
boolean contains(int data);

//use iterator for shorter time
Iterator<Integer> iter = list.iterator();
while (iter.hasNext()) {
	Integer n = iter.next();
	System.out.printf(“ “, n.intValue());
}

public static sort(List<E> list; //sort in increasing order
public static void shuffle(List<E> list); //shuffling randomly
public static void rotate(List<E> list, int distance); //positive >>
public static void reverse(List<E> list);
//ArrayList: in order, simple to search

Stack
push(int item);
int pop();
int peek(); //return top value, not delete item
int search(int data); //top index is 1
boolean empty();

HashMap<Key, Value>
HashMap<String, Student> hash table = HashSet<String, Student>();
boolean isEmpty();
int size(); 
boolean containsKey(String key); boolean containsValue(int value);
put(String key, int value); 
int get(String key); //return value
int remove(String key); //remove key/value pair, return value

TreeSet<int>
//left < right, lower level < upper level, in value’s increasing order
int size();
boolean isEmpty();
void clear();
boolean add(int n); boolean remove(int n); boolean contains(int n);
int first(); //return min node 
int last(); //return max node
TreeMap<Key, Value> //in key’s increasing order

